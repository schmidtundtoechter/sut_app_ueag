[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-05-22 12:23:20.657077",
  "module": "SUT App UEAG",
  "name": "Mitarbeiter - Probezeit festlegen",
  "script": "frappe.ui.form.on('Employee', {\n    custom_dauer_der_probezeit: function(frm) {\n        let eintrittsdatum = frm.doc.date_of_joining;\n        let dauer = frm.doc.custom_dauer_der_probezeit;\n        // Schreibschutz immer zuerst aktivieren\n        frm.set_df_property('custom_probezeit_endet_am', 'read_only', 1);\n        // Sicherstellen, dass ein Eintrittsdatum vorhanden ist (außer bei individueller Vereinbarung)\n        if (!eintrittsdatum && dauer !== \"Individuell vereinbart.\") {\n            frappe.msgprint(__('Bitte zuerst ein Eintrittsdatum eintragen.'));\n            return;\n        }\n        if (dauer === \"Die ersten sechs Monate gelten als Probezeit.\") {\n            let datum = frappe.datetime.add_months(eintrittsdatum, 6);\n            frm.set_value('custom_probezeit_endet_am', datum);\n        } else if (dauer === \"Die ersten drei Monate gelten als Probezeit.\") {\n            let datum = frappe.datetime.add_months(eintrittsdatum, 3);\n            frm.set_value('custom_probezeit_endet_am', datum);\n        } else if (dauer === \"Die Probezeit entfällt.\") {\n            frm.set_value('custom_probezeit_endet_am', eintrittsdatum);\n        } else if (dauer === \"Individuell vereinbart.\") {\n            // Feld leeren und bearbeitbar machen\n            frm.set_value('custom_probezeit_endet_am', '');\n            frm.set_df_property('custom_probezeit_endet_am', 'read_only', 0);\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2025-05-22 12:23:20.691614",
  "module": "SUT App UEAG",
  "name": "Mitarbeiter - Vertragsentwürfe übertragen, dokumentieren und Felder löschen",
  "script": "frappe.ui.form.on('Employee', {\r\n    refresh: function(frm) {\r\n        frm.add_custom_button(__('Vertragsverhandlungen übernehmen'), () => {\r\n            frappe.confirm(\r\n                __(\r\n                    \"Wollen Sie wirklich ALLE Vertragsverhandlungen in die aktuell laufenden Verträge übernehmen und dadurch die Daten der Vertragsverhandlung löschen? \" +\r\n                    \"Alle Änderungen werden Sie in einem Protokoll in den Kommentaren finden. Der Vorgang ist unumkehrbar!\"\r\n                ),\r\n                () => {\r\n                    console.log(\"Confirmed: Starting Vertragsverhandlungen update\");\r\n                    frappe.msgprint(\"Vertragsverhandlungen werden bearbeitet...\");\r\n\r\n                    let changes = [];\r\n\r\n                    function update_field(source, target, field_name) {\r\n                        let source_value = frm.doc[source];\r\n\r\n                        // Check if source_value is not null or undefined\r\n                        if (source_value !== null && source_value !== undefined && source_value !== \"\") {\r\n                            let original_value = frm.doc[target];\r\n\r\n                            // Update target field\r\n                            frm.set_value(target, source_value);\r\n\r\n                            // Log the change\r\n                            changes.push({\r\n                                field_name: field_name,\r\n                                old_value: original_value || 'leer',\r\n                                new_value: source_value,\r\n                                variable_name: target\r\n                            });\r\n\r\n                            // Clear source field\r\n                            frm.set_value(source, null);\r\n                        }\r\n                    }\r\n\r\n                    // Check and update fields for Grundvertrag\r\n                    if (frm.doc.custom_grundvertrag_in_verhandlung) {\r\n                        update_field(\"custom_wochenstunden_grundvertrag_in_verhandlung\", \"custom_wochenstunden_grundvertrag\", \"Wochenstunden Grundvertrag\");\r\n                        update_field(\"custom_gehalt_des_grundvertrags_in_verhandlung\", \"custom_gehalt_des_grundvertrags\", \"Gehalt des Grundvertrags\");\r\n                        update_field(\"custom_grundlage_der_vergütung_tarifdetails_in_verhandlung\", \"custom_grundlage_der_vergütung\", \"Grundlage der Vergütung\");\r\n                        update_field(\"custom_unterzeichnungsdatum_in_verhandlung\", \"custom_unterzeichnungsdatum\", \"Unterzeichnungsdatum\");\r\n                        update_field(\"custom_start_des_grundvertrags_in_verhandlung\", \"custom_start_des_grundvertrags\", \"Start des Grundvertrags\");\r\n                        update_field(\"custom_ende_des_arbeitsverhältnis_in_verhandlung\", \"custom_ende_des_arbeitsverhältnis\", \"Ende des Arbeitsverhältnisses\");\r\n                    }\r\n\r\n                    // Clear source fields and reset negotiation flag for Grundvertrag\r\n                    frm.set_value(\"custom_grundvertrag_in_verhandlung\", 0);\r\n\r\n                    // Speichern und Kommentar hinzufügen\r\n                    frm.save().then(() => {\r\n                        if (changes.length > 0) {\r\n                            // Generate HTML Table for changes\r\n                            let table_html = `\r\n                                <table style=\"width:100%; border-collapse: collapse; margin-top: 10px;\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Name Geändertes Feld</th>\r\n                                            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Alter Wert</th>\r\n                                            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Neuer Wert</th>\r\n                                            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Variablenname</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        ${changes.map(change => `\r\n                                            <tr>\r\n                                                <td style=\"border: 1px solid #ddd; padding: 8px;\">${change.field_name}</td>\r\n                                                <td style=\"border: 1px solid #ddd; padding: 8px;\">${change.old_value}</td>\r\n                                                <td style=\"border: 1px solid #ddd; padding: 8px;\">${change.new_value}</td>\r\n                                                <td style=\"border: 1px solid #ddd; padding: 8px;\">${change.variable_name}</td>\r\n                                            </tr>\r\n                                        `).join('')}\r\n                                    </tbody>\r\n                                </table>\r\n                            `;\r\n\r\n                            console.log(\"Changes HTML:\", table_html);\r\n\r\n                            // Kommentar als HTML-Tabelle hinzufügen\r\n                            frappe.call({\r\n                                method: \"frappe.client.insert\",\r\n                                args: {\r\n                                    doc: {\r\n                                        doctype: \"Comment\",\r\n                                        comment_type: \"Comment\",\r\n                                        reference_doctype: frm.doc.doctype,\r\n                                        reference_name: frm.doc.name,\r\n                                        content: table_html\r\n                                    }\r\n                                },\r\n                                callback: function(response) {\r\n                                    if (response.message) {\r\n                                        frappe.msgprint({\r\n                                            message: \"Änderungen wurden erfolgreich als Kommentar hinzugefügt.\",\r\n                                            indicator: \"green\"\r\n                                        });\r\n                                    }\r\n                                }\r\n                            });\r\n                        } else {\r\n                            frappe.msgprint(\"Keine Änderungen vorgenommen.\");\r\n                        }\r\n\r\n                        // Reload the document to reflect changes\r\n                        frm.reload_doc();\r\n                    }).catch(err => {\r\n                        frappe.msgprint({\r\n                            title: __('Fehler'),\r\n                            message: __('Das Dokument konnte nicht gespeichert werden. Änderungen wurden nicht übernommen.'),\r\n                            indicator: 'red'\r\n                        });\r\n                        console.error('Fehler beim Speichern:', err);\r\n                    });\r\n                }\r\n            );\r\n        }, __('Aktionen'));\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2025-05-22 12:23:20.724392",
  "module": "SUT App UEAG",
  "name": "Mitarbeiter - Behinderung",
  "script": "frappe.ui.form.on('Employee', {\r\n    custom_grad_der_behinderung: function(frm) {\r\n        // Prüfen, ob das Feld vorhanden ist\r\n        if (!frm.doc.custom_grad_der_behinderung) {\r\n            console.log(\"Feld 'custom_grad_der_behinderung' ist leer oder nicht vorhanden.\");\r\n            return;\r\n        }\r\n\r\n        let grad = frm.doc.custom_grad_der_behinderung;\r\n\r\n        // Standardwerte setzen\r\n        frm.set_value('custom_schwerbehinderung', 'Nein');\r\n        frm.set_df_property('custom_schwerbehinderung', 'hidden', false);\r\n        frm.set_df_property('custom_gleichstellung', 'hidden', true);\r\n\r\n        if (grad === 'keine Behinderung') {\r\n            // Wenn \\\"keine Behinderung\\\" ausgewählt ist, Feld ausblenden\r\n            frm.set_df_property('custom_schwerbehinderung', 'hidden', true);\r\n        } else if (['50%', '60%', '70%', '80%', '90%', '100%'].includes(grad)) {\r\n            // Wenn Grad der Behinderung 50% oder mehr beträgt\r\n            frm.set_value('custom_schwerbehinderung', 'Ja');\r\n        } else if (['30%', '40%'].includes(grad)) {\r\n            // Wenn Grad der Behinderung 30% oder 40% beträgt\r\n            frm.set_df_property('custom_gleichstellung', 'hidden', false);\r\n        }\r\n\r\n        console.log(`Grad der Behinderung: ${grad}`);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2025-05-22 12:23:20.867891",
  "module": "SUT App UEAG",
  "name": "Mitarbeiter - Checke in allen Projekten bestimmte Vorgaben",
  "script": "frappe.ui.form.on('Employee', {\r\n    refresh: function(frm) {\r\n        // Prüfe alle Projektfelder beim Laden des Formulars\r\n        check_projekte(frm);\r\n    },\r\n    custom_projekt_1: function(frm) {\r\n        // Prüfe das erste Projektfeld, wenn es geändert oder geleert wird\r\n        check_projekte(frm);\r\n    },\r\n    custom_projekt_2: function(frm) {\r\n        check_projekte(frm);\r\n    },\r\n    custom_projekt_3: function(frm) {\r\n        check_projekte(frm);\r\n    },\r\n    custom_projekt_4: function(frm) {\r\n        check_projekte(frm);\r\n    },\r\n    custom_projekt_5: function(frm) {\r\n        check_projekte(frm);\r\n    }\r\n});\r\n\r\n// Funktion zur Überprüfung der Projekte\r\nfunction check_projekte(frm) {\r\n    var projekt_felder = [\r\n        frm.doc.custom_projekt_1, \r\n        frm.doc.custom_projekt_2, \r\n        frm.doc.custom_projekt_3, \r\n        frm.doc.custom_projekt_4, \r\n        frm.doc.custom_projekt_5\r\n    ];\r\n\r\n    var min_aktualisierungsturnus = null;\r\n    var aktualisierung_notwendig = false;\r\n\r\n    // Überprüfe jedes Projektfeld\r\n    for (var i = 0; i < projekt_felder.length; i++) {\r\n        var projekt = projekt_felder[i];\r\n        \r\n        if (projekt) {\r\n            // Datenbankabfrage für die Projektfelder durchführen\r\n            frappe.db.get_value('Project', projekt, [\r\n                'custom_aufenthaltstitel_nötig',\r\n                'custom_führungszeugnis_nötig',\r\n                'custom_brandschutzhelfernachweis_benötigt',\r\n                'custom_einverständniserklärung_akteneinsicht_notwendig',\r\n                'custom_masernnachweis_nötig',\r\n                'custom_gesundheitspass_nötig',\r\n                'custom_ersthelfernachweis_benötigt',\r\n                'custom_in_welchem_aktualisierungsturnus'\r\n            ], function(r) {\r\n                if (r) {\r\n                    // Setze oder entferne Werte für die jeweiligen Felder\r\n                    frm.set_value('custom_aufenthaltstitel_nötig', r.custom_aufenthaltstitel_nötig || 0);\r\n                    frm.set_value('custom_führungszeugnis_nötig', r.custom_führungszeugnis_nötig || 0);\r\n                    frm.set_value('custom_brandschutzhelfernachweis_benötigt', r.custom_brandschutzhelfernachweis_benötigt || 0);\r\n                    frm.set_value('custom_einverständniserklärung_akteneinsicht_notwendig', r.custom_einverständniserklärung_akteneinsicht_notwendig || 0);\r\n                    frm.set_value('custom_masernnachweis_nötig', r.custom_masernnachweis_nötig || 0);\r\n                    frm.set_value('custom_gesundheitspass_nötig', r.custom_gesundheitspass_nötig || 0);\r\n                    frm.set_value('custom_ersthelfernachweis_benötigt', r.custom_ersthelfernachweis_benötigt || 0);\r\n\r\n                    // Aktualisierungsturnus finden (niedrigsten Wert ermitteln)\r\n                    if (r.custom_in_welchem_aktualisierungsturnus) {\r\n                        var aktueller_turnus = r.custom_in_welchem_aktualisierungsturnus;\r\n                        if (min_aktualisierungsturnus === null || aktueller_turnus < min_aktualisierungsturnus) {\r\n                            min_aktualisierungsturnus = aktueller_turnus;\r\n                        }\r\n                    }\r\n                    aktualisierung_notwendig = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Wenn keine Projektfelder gesetzt sind, setze die Zielfelder auf 0\r\n    if (!aktualisierung_notwendig) {\r\n        frm.set_value('custom_aufenthaltstitel_nötig', 0);\r\n        frm.set_value('custom_führungszeugnis_nötig', 0);\r\n        frm.set_value('custom_brandschutzhelfernachweis_benötigt', 0);\r\n        frm.set_value('custom_einverständniserklärung_akteneinsicht_notwendig', 0);\r\n        frm.set_value('custom_masernnachweis_nötig', 0);\r\n        frm.set_value('custom_gesundheitspass_nötig', 0);\r\n        frm.set_value('custom_ersthelfernachweis_benötigt', 0);\r\n    }\r\n\r\n    // Setze den niedrigsten Wert für custom_in_welchem_aktualisierungsturnus\r\n    if (min_aktualisierungsturnus !== null) {\r\n        frm.set_value('custom_in_welchem_aktualisierungsturnus', min_aktualisierungsturnus);\r\n    } else {\r\n        frm.set_value('custom_in_welchem_aktualisierungsturnus', '');\r\n    }\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-05-22 12:23:20.901346",
  "module": "SUT App UEAG",
  "name": "Mitarbeiter - Führungszeugnis Aktualisierung",
  "script": "\nfrappe.ui.form.on('Employee', {\n    // Trigger bei Änderung des Prüffeldes, Datumsfeldes oder Aktualisierungsturnus-Feldes\n    custom_führungszeugnis_nötig: function(frm) {\n        berechne_neues_führungszeugnis(frm);\n    },\n    custom_datum_des_führungszeugnisses: function(frm) {\n        berechne_neues_führungszeugnis(frm);\n    },\n    custom_in_welchem_aktualisierungsturnus: function(frm) {\n        berechne_neues_führungszeugnis(frm);\n    }\n});\n\nfunction berechne_neues_führungszeugnis(frm) {\n    // Prüfen, ob das Führungszeugnis notwendig ist und ob beide Felder ausgefüllt sind\n    if (frm.doc.custom_führungszeugnis_nötig && frm.doc.custom_datum_des_führungszeugnisses && frm.doc.custom_in_welchem_aktualisierungsturnus) {\n        // Datum und Aktualisierungsturnus abrufen\n        let datum_des_führungszeugnisses = frappe.datetime.str_to_obj(frm.doc.custom_datum_des_führungszeugnisses);\n        let aktualisierungsturnus = parseInt(frm.doc.custom_in_welchem_aktualisierungsturnus);\n\n        // Neues Datum berechnen\n        datum_des_führungszeugnisses.setFullYear(datum_des_führungszeugnisses.getFullYear() + aktualisierungsturnus);\n        let neues_datum = frappe.datetime.obj_to_str(datum_des_führungszeugnisses);\n\n        // Berechnetes Datum in das Ziel-Feld eintragen\n        frm.set_value('custom_neues_führungszeugnis_notwendig_am', neues_datum);\n    } else {\n        // Falls das Prüffeld deaktiviert ist oder eines der Felder leer ist, das Ziel-Feld leeren\n        frm.set_value('custom_neues_führungszeugnis_notwendig_am', null);\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-05-23 12:34:26.873687",
  "module": "SUT App UEAG",
  "name": "Mitarbeiter - Vertragsentwürfe übertragen, dokumentieren und Felder löschen V2",
  "script": "// large m : the script has been reviewed and corrected (if necessary).\r\n\r\nfrappe.ui.form.on('Employee', {\r\n    refresh: function (frm) {\r\n        frm.add_custom_button(__('Vertragsverhandlungen übernehmen'), () => {\r\n            frappe.confirm(\r\n                __(\r\n                    \"Wollen Sie wirklich ALLE Vertragsverhandlungen in die aktuell laufenden Verträge übernehmen und dadurch die Daten der Vertragsverhandlung löschen? \" +\r\n                    \"Alle Änderungen werden Sie in einem Protokoll in den Kommentaren finden. Der Vorgang ist unumkehrbar!\"\r\n                ),\r\n                () => {\r\n                    // Prüfen, ob eine Gehaltsverhandlung verknüpft ist\r\n                    if (!frm.doc.custom_gehaltsverhandlung) {\r\n                        frappe.msgprint(\"Keine Gehaltsverhandlung mit diesem Mitarbeiter verknüpft.\");\r\n                        return;\r\n                    }\r\n\r\n                    console.log(\"Confirmed: Starting Vertragsverhandlungen update\");\r\n                    frappe.msgprint(\"Vertragsverhandlungen werden bearbeitet...\");\r\n\r\n                    // Gehaltsverhandlungsdokument abrufen\r\n                    frappe.db.get_doc(\"GEHALTSVERHANDLUNG\", frm.doc.custom_gehaltsverhandlung)\r\n                        .then(gehaltsverhandlung => {\r\n                            let changes = [];\r\n\r\n                            // Funktion zum Aktualisieren eines Feldes vom GEHALTSVERHANDLUNG zum Employee\r\n                            function update_field(source_field, target_field, field_label) {\r\n                                let source_value = gehaltsverhandlung[source_field];\r\n                                if (source_value !== null && source_value !== undefined && source_value !== \"\") {\r\n                                    let original_value = frm.doc[target_field];\r\n\r\n                                    // Update Zielfeld im Employee\r\n                                    frm.set_value(target_field, source_value);\r\n\r\n                                    // Änderung protokollieren\r\n                                    changes.push({\r\n                                        field_name: field_label,\r\n                                        old_value: original_value || 'leer',\r\n                                        new_value: source_value,\r\n                                        variable_name: target_field\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            // Map für alle Felder - angepasst für GEHALTSVERHANDLUNG doctype\r\n                            const fields_map = {\r\n                                custom_grundvertrag_in_verhandlung: [\r\n                                    { source: \"custom_wochenstunden_grundvertrag_in_verhandlung\", target: \"custom_wochenstunden_grundvertrag\", label: \"Wochenstunden Grundvertrag\" },\r\n                                    { source: \"custom_gehalt_des_grundvertrags_in_verhandlung\", target: \"custom_gehalt_des_grundvertrags\", label: \"Gehalt des Grundvertrags\" },\r\n                                    { source: \"custom_grundlage_der_vergütung_tarifdetails_in_verhandlung\", target: \"custom_grundlage_der_vergütung\", label: \"Grundlage der Vergütung\" },\r\n                                    { source: \"custom_unterzeichnungsdatum_in_verhandlung\", target: \"custom_unterzeichnungsdatum\", label: \"Unterzeichnungsdatum\" },\r\n                                    { source: \"custom_start_des_grundvertrags_in_verhandlung\", target: \"custom_start_des_grundvertrags\", label: \"Start des Grundvertrags\" },\r\n                                    { source: \"custom_ende_des_arbeitsverhältnis_in_verhandlung\", target: \"custom_ende_des_arbeitsverhältnisses\", label: \"Ende des Arbeitsverhältnisses\" },\r\n                                    { source: \"custom_jahressonderzahlung_grundvertrag_in_p_in_verhandlung\", target: \"custom_jahressonderzahlung_grundvertrag\", label: \"Jahressonderzahlung Grundvertrag\" },\r\n                                    { source: \"custom_jahressonderzahlung_grundvertrag_in_e_in_verhandlung\", target: \"custom_jahresssonderzahlung_grundvertrag_in_\", label: \"Jahressonderzahlung Grundvertrag in €\" }\r\n                                ],\r\n                                custom_projekt_1_in_verhandlung: [\r\n                                    { source: \"custom_projekt_1_iv\", target: \"custom_projekt_1\", label: \"Projekt 1\" },\r\n                                    { source: \"custom_tätigkeitsbezeichnung_1_iv\", target: \"custom_tätigkeitsbezeichnung_1\", label: \"Tätigkeitsbezeichnung Projekt 1\" },\r\n                                    { source: \"custom_wochenstunden_projekt_1_iv\", target: \"custom_wochenstunden_projekt_1\", label: \"Wochenstunden Projekt 1\" },\r\n                                    { source: \"custom_wochenstunden_zum_grundvertrag_hinzurechnen_iv\", target: \"custom_wochenstunden_zum_grundvertrag_hinzurechnen\", label: \"Wochenstunden zum Grundvertrag\" },\r\n                                    { source: \"custom_start_der_1_arbeit_iv\", target: \"custom_start_der_1_arbeit\", label: \"Start der 1. Arbeit\" },\r\n                                    { source: \"custom_befristung_des_1_vertrags_iv\", target: \"custom_befristung_des_1_vertrags\", label: \"Befristung des 1. Vertrags\" },\r\n                                    { source: \"custom_gehalt_projekt_1_iv\", target: \"custom_gehalt_projekt_1\", label: \"Gehalt Projekt 1\" },\r\n                                    { source: \"custom_grundlage_der_vergütung_tarifdetails_pr_1_iv\", target: \"custom_grundlage_der_vergütung_tarifdetails_pr_1\", label: \"Vergütungsdetails Projekt 1\" },\r\n                                    { source: \"custom_ist_zusätzliche_vergütung_zum_grundgehalt_iv\", target: \"custom_ist_zusätzliche_vergütung_zum_grundgehalt\", label: \"Zusätzliche Vergütung\" },\r\n                                    { source: \"custom_jahressonderzahlung_projekt_1_in_p_iv\", target: \"custom_jahressonderzahlung\", label: \"Jahressonderzahlung Projekt 1\" },\r\n                                    { source: \"custom_jahressonderzahlung_projekt_1_in_e_iv\", target: \"custom_jahressonderzahlung_projekt_1_in_\", label: \"Sonderzahlung Projekt 1 in E\" }\r\n                                ],\r\n                                custom_projekt_2_in_verhandlung: [\r\n                                    { source: \"custom_projekt_2_iv\", target: \"custom_projekt_2\", label: \"Projekt 2\" },\r\n                                    { source: \"custom_tätigkeitsbezeichnung_2_iv\", target: \"custom_tätigkeitsbezeichnung_2\", label: \"Tätigkeitsbezeichnung Projekt 2\" },\r\n                                    { source: \"custom_wochenstunden_projekt_2_iv\", target: \"custom_wochenstunden_projekt_2\", label: \"Wochenstunden Projekt 2\" },\r\n                                    { source: \"custom_wochenstunden_zum_grundvertrag_hinzurechnen_1_iv\", target: \"custom_wochenstunden_zum_grundvertrag_hinzurechnen_1\", label: \"Wochenstunden zum Grundvertrag 2\" },\r\n                                    { source: \"custom_start_der_2_arbeit_iv\", target: \"custom_start_der_2_arbeit\", label: \"Start der 2. Arbeit\" },\r\n                                    { source: \"custom_befristung_des_2_vertrags_iv\", target: \"custom_befristung_des_2_vertrags\", label: \"Befristung des 2. Vertrags\" },\r\n                                    { source: \"custom_gehalt_projekt_2_iv\", target: \"custom_gehalt_projekt_2\", label: \"Gehalt Projekt 2\" },\r\n                                    { source: \"custom_grundlage_der_vergütung_tarifdetails_pr_2_iv\", target: \"custom_grundlage_der_vergütung_tarifdetails_pr_2\", label: \"Vergütungsdetails Projekt 2\" },\r\n                                    { source: \"custom_ist_zusätzliche_vergütung_zum_grundgehalt_1_iv\", target: \"custom_ist_zusätzliche_vergütung_zum_grundgehalt_2\", label: \"Zusätzliche Vergütung\" },\r\n                                    { source: \"custom_jahressonderzahlung_projekt_2_in_p_iv\", target: \"custom_jahressonderzahlung_projekt_2\", label: \"Jahressonderzahlung Projekt 2\" },\r\n                                    { source: \"custom_jahressonderzahlung_projekt_2_in_e_iv\", target: \"custom_jahressonderzahlung_projekt_2_in_\", label: \"Sonderzahlung Projekt 2 in E\" }\r\n                                ],\r\n                                custom_projekt_3_in_verhandlung: [\r\n                                    { source: \"custom_projekt_3_iv\", target: \"custom_projekt_3\", label: \"Projekt 3\" },\r\n                                    { source: \"custom_tätigkeitsbezeichnung_3_iv\", target: \"custom_tätigkeitsbezeichnung_3\", label: \"Tätigkeitsbezeichnung Projekt 3\" },\r\n                                    { source: \"custom_wochenstunden_projekt_3_iv\", target: \"custom_wochenstunden_projekt_3\", label: \"Wochenstunden Projekt 3\" },\r\n                                    { source: \"custom_wochenstunden_zum_grundvertrag_hinzurechnen_3_iv\", target: \"custom_wochenstunden_zum_grundvertrag_hinzurechnen_2\", label: \"Wochenstunden zum Grundvertrag 3\" },\r\n                                    { source: \"custom_start_der_3_arbeit_iv\", target: \"custom_start_der_3_arbeit\", label: \"Start der 3. Arbeit\" },\r\n                                    { source: \"custom_befristung_des_3_vertrags_iv\", target: \"custom_befristung_des_3_vertrags\", label: \"Befristung des 3. Vertrags\" },\r\n                                    { source: \"custom_gehalt_projekt_3_iv\", target: \"custom_gehalt_projekt_3\", label: \"Gehalt Projekt 3\" },\r\n                                    { source: \"custom_grundlage_der_vergütung_tarifdetails_pr_3_iv\", target: \"custom_grundlage_der_vergütung_tarifdetails_pr_3\", label: \"Vergütungsdetails Projekt 3\" },\r\n                                    { source: \"custom_ist_zusätzliche_vergütung_zum_grundgehalt_2_iv\", target: \"custom_ist_zusätzliche_vergütung_zum_grundgehalt_3\", label: \"Zusätzliche Vergütung\" },\r\n                                    { source: \"custom_jahressonderzahlung_projekt_3_in_p_iv\", target: \"custom_jahressonderzahlung_projekt_3\", label: \"Jahressonderzahlung Projekt 3\" },\r\n                                    { source: \"custom_jahressonderzahlung_projekt_3_in_e_iv\", target: \"custom_jahressonderzahlung_projekt_3_in_\", label: \"Sonderzahlung Projekt 3 in E\" }\r\n                                ],\r\n                                custom_zulage_1_in_verhandlung: [\r\n                                    { source: \"custom_projekt_zulage_1_iv\", target: \"custom_projekt_zulage_1\", label: \"Projekt Zulage 1\" },\r\n                                    { source: \"custom_kostenstelle_zulage_1_iv\", target: \"custom_kostenstelle_zulage_1\", label: \"Kostenstelle Zulage 1\" },\r\n                                    { source: \"custom_anfangsdatum_zulage_1_iv\", target: \"custom_anfangsdatum_zulage_1\", label: \"Anfangsdatum Zulage 1\" },\r\n                                    { source: \"custom_enddatum_zulage_1_iv\", target: \"custom_enddatum_zulage_1\", label: \"Enddatum Zulage 1\" },\r\n                                    { source: \"custom_zulage_zulage_1_iv\", target: \"custom_zulage_zulage_1\", label: \"Zulage Betrag 1\" },\r\n                                    { source: \"custom_positionsbezeichnung_zulage_1_iv\", target: \"custom_positionsbezeichnung_zulage_1\", label: \"Positionsbezeichnung Zulage 1\" },\r\n                                    { source: \"custom_wochenstunden_zulage_1_iv\", target: \"custom_wochenstunden_zulage_1\", label: \"Wochenstunden Zulage 1\" }\r\n                                ],\r\n                                custom_zulage_2_in_verhandlung: [\r\n                                    { source: \"custom_projekt_zulage_2_iv\", target: \"custom_projekt_zulage_2\", label: \"Projekt Zulage 2\" },\r\n                                    { source: \"custom_kostenstelle_zulage_2_iv\", target: \"custom_kostenstelle_zulage_2\", label: \"Kostenstelle Zulage 2\" },\r\n                                    { source: \"custom_anfangsdatum_zulage_2_iv\", target: \"custom_anfangsdatum_zulage_2\", label: \"Anfangsdatum Zulage 2\" },\r\n                                    { source: \"custom_enddatum_zulage_2_iv\", target: \"custom_enddatum_zulage_2\", label: \"Enddatum Zulage 2\" },\r\n                                    { source: \"custom_zulage_zulage_2_iv\", target: \"custom_zulage_zulage_2\", label: \"Zulage Zulage 2\" },\r\n                                    { source: \"custom_positionsbezeichnung_zulage_2_iv\", target: \"custom_positionsbezeichnung_zulage_2\", label: \"Positionsbezeichnung Zulage 2\" },\r\n                                    { source: \"custom_wochenstunden_zulage_2_iv\", target: \"custom_wochenstunden_zulage_2\", label: \"Wochenstunden Zulage 2\" }\r\n                                ]\r\n                            };\r\n\r\n                            // Änderungen anwenden\r\n                            Object.keys(fields_map).forEach(parent_field => {\r\n                                if (gehaltsverhandlung[parent_field]) {\r\n                                    fields_map[parent_field].forEach(field => {\r\n                                        update_field(field.source, field.target, field.label);\r\n                                    });\r\n                                }\r\n                            });\r\n\r\n                            // Speichern und Kommentar hinzufügen\r\n                            frm.save().then(() => {\r\n                                if (changes.length > 0) {\r\n                                    let table_html = `\r\n                                        <table style=\"width:100%; border-collapse: collapse;\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>Geändertes Feld</th>\r\n                                                    <th>Alter Wert</th>\r\n                                                    <th>Neuer Wert</th>\r\n                                                    <th>Variablenname</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                ${changes.map(change => `\r\n                                                    <tr>\r\n                                                        <td>${change.field_name}</td>\r\n                                                        <td>${change.old_value}</td>\r\n                                                        <td>${change.new_value}</td>\r\n                                                        <td>${change.variable_name}</td>\r\n                                                    </tr>\r\n                                                `).join('')}\r\n                                            </tbody>\r\n                                        </table>\r\n                                    `;\r\n\r\n                                    frappe.call({\r\n                                        method: \"frappe.client.insert\",\r\n                                        args: {\r\n                                            doc: {\r\n                                                doctype: \"Comment\",\r\n                                                comment_type: \"Comment\",\r\n                                                reference_doctype: frm.doc.doctype,\r\n                                                reference_name: frm.doc.name,\r\n                                                content: table_html\r\n                                            }\r\n                                        },\r\n                                        callback: function (r) {\r\n                                            // Nach dem Speichern des Protokolls, das Gehaltsverhandlungsdokument löschen oder bearbeiten\r\n                                            frappe.call({\r\n                                                method: \"frappe.client.set_value\",\r\n                                                args: {\r\n                                                    doctype: \"GEHALTSVERHANDLUNG\",\r\n                                                    name: frm.doc.custom_gehaltsverhandlung,\r\n                                                    fieldname: {\r\n                                                        custom_grundvertrag_in_verhandlung: 0,\r\n                                                        custom_projekt_1_in_verhandlung: 0,\r\n                                                        custom_projekt_2_in_verhandlung: 0,\r\n                                                        custom_projekt_3_in_verhandlung: 0,\r\n                                                        custom_zulage_1_in_verhandlung: 0,\r\n                                                        custom_zulage_2_in_verhandlung: 0\r\n                                                    }\r\n                                                },\r\n                                                callback: function() {\r\n                                                    frappe.msgprint(\"Änderungen wurden erfolgreich übernommen und protokolliert. Die Verhandlungsfelder wurden zurückgesetzt.\");\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    frappe.msgprint(\"Keine Änderungen vorgenommen.\");\r\n                                }\r\n                            }).catch(err => {\r\n                                frappe.msgprint(\"Fehler beim Speichern der Änderungen.\");\r\n                                console.error(err);\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            frappe.msgprint(\"Fehler beim Abrufen der Gehaltsverhandlungsdaten.\");\r\n                            console.error(err);\r\n                        });\r\n                }\r\n            );\r\n        }, __('Aktionen'));\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2025-05-22 12:23:20.793552",
  "module": "SUT App UEAG",
  "name": "Mitarbeiter - Daten aus verknüpften Projekten ziehen V2",
  "script": "frappe.ui.form.on('Employee', {\r\n    refresh: function(frm) {\r\n        // Führt die Überprüfung bei jedem Laden des Formulars aus\r\n        check_projekte(frm);\r\n    },\r\n    custom_projekt_1: function(frm) {\r\n        // Prüft das erste Projektfeld, wenn es geändert oder geleert wird\r\n        check_projekte(frm);\r\n    },\r\n    custom_projekt_2: function(frm) {\r\n        check_projekte(frm);\r\n    },\r\n    custom_projekt_3: function(frm) {\r\n        check_projekte(frm);\r\n    },\r\n    custom_projekt_4: function(frm) {\r\n        check_projekte(frm);\r\n    }\r\n});\r\n\r\n// Funktion zur Überprüfung der Projekte und Aktualisierung der Felder im Mitarbeiter-Dokument\r\nfunction check_projekte(frm) {\r\n    // Liste der Projektfelder\r\n    var projekt_felder = [\r\n        frm.doc.custom_projekt_1,\r\n        frm.doc.custom_projekt_2,\r\n        frm.doc.custom_projekt_3,\r\n        frm.doc.custom_projekt_4\r\n    ];\r\n\r\n    // Flags für die \"Notwendigkeit\"-Felder initialisieren\r\n    var aufenthaltstitel_noetig = false;\r\n    var fuehrungszeugnis_noetig = false;\r\n    var brandschutzhelfernachweis_noetig = false;\r\n    var einverstaendniserklaerung_noetig = false;\r\n    var masernnachweis_noetig = false;\r\n    var gesundheitspass_noetig = false;\r\n    var ersthelfernachweis_noetig = false;\r\n    var min_aktualisierungsturnus = null; // Für den niedrigsten Aktualisierungsturnus-Wert\r\n\r\n    var count = 0;\r\n\r\n    projekt_felder.forEach(function(projekt) {\r\n        if (projekt) {\r\n            // Datenbankabfrage für die Projektfelder\r\n            frappe.db.get_value('Project', projekt, [\r\n                'custom_aufenthaltstitel_nötig',\r\n                'custom_führungszeugnis_nötig',\r\n                'custom_brandschutzhelfernachweis_benötigt',\r\n                'custom_einverständniserklärung_akteneinsicht_notwendig',\r\n                'custom_masernnachweis_nötig',\r\n                'custom_gesundheitspass_nötig',\r\n                'custom_ersthelfernachweis_benötigt',\r\n                'custom_in_welchem_aktualisierungsturnus',\r\n                'expected_end_date'\r\n            ], function(r) {\r\n                if (r) {\r\n                    // Notwendigkeit-Flags setzen, wenn in einem Projekt ein Feld auf 1 steht\r\n                    aufenthaltstitel_noetig = aufenthaltstitel_noetig || r.custom_aufenthaltstitel_nötig;\r\n                    fuehrungszeugnis_noetig = fuehrungszeugnis_noetig || r.custom_führungszeugnis_nötig;\r\n                    brandschutzhelfernachweis_noetig = brandschutzhelfernachweis_noetig || r.custom_brandschutzhelfernachweis_benötigt;\r\n                    einverstaendniserklaerung_noetig = einverstaendniserklaerung_noetig || r.custom_einverständniserklärung_akteneinsicht_notwendig;\r\n                    masernnachweis_noetig = masernnachweis_noetig || r.custom_masernnachweis_nötig;\r\n                    gesundheitspass_noetig = gesundheitspass_noetig || r.custom_gesundheitspass_nötig;\r\n                    ersthelfernachweis_noetig = ersthelfernachweis_noetig || r.custom_ersthelfernachweis_benötigt;\r\n\r\n                    // Niedrigsten Aktualisierungsturnus finden, falls gesetzt\r\n                    if (r.custom_in_welchem_aktualisierungsturnus && (min_aktualisierungsturnus === null || r.custom_in_welchem_aktualisierungsturnus < min_aktualisierungsturnus)) {\r\n                        min_aktualisierungsturnus = r.custom_in_welchem_aktualisierungsturnus;\r\n                    }\r\n\r\n                    // Übertragung des `expected_end_date` in das entsprechende Vertragsfeld\r\n                    if (projekt === frm.doc.custom_projekt_1 && !frm.doc.custom_befristung_des_1_vertrags) {\r\n                        frm.set_value('custom_befristung_des_1_vertrags', r.expected_end_date);\r\n                    }\r\n                    if (projekt === frm.doc.custom_projekt_2 && !frm.doc.custom_befristung_des_2_vertrags) {\r\n                        frm.set_value('custom_befristung_des_2_vertrags', r.expected_end_date);\r\n                    }\r\n                    if (projekt === frm.doc.custom_projekt_3 && !frm.doc.custom_befristung_des_3_vertrags) {\r\n                        frm.set_value('custom_befristung_des_3_vertrags', r.expected_end_date);\r\n                    }\r\n                    if (projekt === frm.doc.custom_projekt_4 && !frm.doc.custom_befristung_des_4_vertrags) {\r\n                        frm.set_value('custom_befristung_des_4_vertrags', r.expected_end_date);\r\n                    }\r\n                }\r\n\r\n                // Inkrementiere den Zähler und prüfe, ob alle Projekte verarbeitet wurden\r\n                count++;\r\n                if (count === projekt_felder.filter(p => p).length) {\r\n                    // Alle Projekte wurden verarbeitet, also die Werte im Employee-Dokument setzen\r\n                    frm.set_value('custom_aufenthaltstitel_nötig', aufenthaltstitel_noetig ? 1 : 0);\r\n                    frm.set_value('custom_führungszeugnis_nötig', fuehrungszeugnis_noetig ? 1 : 0);\r\n                    frm.set_value('custom_brandschutzhelfernachweis_benötigt', brandschutzhelfernachweis_noetig ? 1 : 0);\r\n                    frm.set_value('custom_einverständniserklärung_akteneinsicht_notwendig', einverstaendniserklaerung_noetig ? 1 : 0);\r\n                    frm.set_value('custom_masernnachweis_nötig', masernnachweis_noetig ? 1 : 0);\r\n                    frm.set_value('custom_gesundheitspass_nötig', gesundheitspass_noetig ? 1 : 0);\r\n                    frm.set_value('custom_ersthelfernachweis_benötigt', ersthelfernachweis_noetig ? 1 : 0);\r\n\r\n                    // Aktualisierungsturnus setzen oder leeren\r\n                    frm.set_value('custom_in_welchem_aktualisierungsturnus', min_aktualisierungsturnus !== null ? min_aktualisierungsturnus : '');\r\n                }\r\n            });\r\n        } else {\r\n            // Falls ein Projektfeld geleert wird, alle relevanten Felder auf 0 setzen und das Script erneut durchlaufen\r\n            frm.set_value('custom_aufenthaltstitel_nötig', 0);\r\n            frm.set_value('custom_führungszeugnis_nötig', 0);\r\n            frm.set_value('custom_brandschutzhelfernachweis_benötigt', 0);\r\n            frm.set_value('custom_einverständniserklärung_akteneinsicht_notwendig', 0);\r\n            frm.set_value('custom_masernnachweis_nötig', 0);\r\n            frm.set_value('custom_gesundheitspass_nötig', 0);\r\n            frm.set_value('custom_ersthelfernachweis_benötigt', 0);\r\n            frm.set_value('custom_in_welchem_aktualisierungsturnus', '');\r\n\r\n            // Script erneut durchlaufen, um den aktuellen Stand zu prüfen\r\n            check_projekte(frm);\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-05-22 12:23:20.832001",
  "module": "SUT App UEAG",
  "name": "Mitarbeiter - Vertragsende",
  "script": "frappe.ui.form.on('Employee', {\n    refresh: function(frm) {\n        set_earliest_contract_end(frm);\n    },\n    validate: function(frm) {\n        set_earliest_contract_end(frm);\n    }\n});\n\nfunction set_earliest_contract_end(frm) {\n    // Array der Felder, die geprüft werden sollen\n    const dateFields = [\n        { field: 'custom_ende_des_arbeitsverhältnis', label: 'Ende des Arbeitsverhältnisses' },\n        { field: 'custom_befristung_des_1_vertrags', label: 'Befristung des 1. Vertrags' },\n        { field: 'custom_befristung_des_2_vertrags', label: 'Befristung des 2. Vertrags' },\n        { field: 'custom_befristung_des_3_vertrags', label: 'Befristung des 3. Vertrags' },\n        { field: 'custom_befristung_des_4_vertrags', label: 'Befristung des 4. Vertrags' },\n        { field: 'custom_enddatum_zulage_1', label: 'Enddatum Zulage 1' },\n        { field: 'custom_enddatum_zulage_2', label: 'Enddatum Zulage 2' }\n    ];\n\n    let earliestDate = null;\n    let earliestLabel = '';\n\n    // Durchlaufen der Felder und Ermittlung des frühesten Datums\n    dateFields.forEach(dateField => {\n        const fieldValue = frm.doc[dateField.field];\n        if (fieldValue) {\n            const fieldDate = new Date(fieldValue);\n            if (!earliestDate || fieldDate < earliestDate) {\n                earliestDate = fieldDate;\n                earliestLabel = dateField.label;\n            }\n        }\n    });\n\n    // Festlegen des frühesten Datums und des Labels\n    if (earliestDate) {\n        frm.set_value('custom_nächstes_vertragsende', earliestDate.toISOString().split('T')[0]);\n        frm.set_df_property('custom_nächstes_vertragsende', 'description', 'Nächstes Vertragsende: ' + earliestLabel);\n    } else {\n        // Leeren des Feldes und der Beschriftung, falls kein Datum vorhanden ist\n        frm.set_value('custom_nächstes_vertragsende', '');\n        frm.set_df_property('custom_nächstes_vertragsende', 'description', '');\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-05-22 12:23:20.933439",
  "module": "SUT App UEAG",
  "name": "Mitarbeiter - Mitarbeiternummer prüfen",
  "script": "frappe.ui.form.on('Employee', {\n    employee_number: function(frm) {\n        if (frm.doc.employee_number) {\n            frappe.db.get_value('Employee', { 'employee_number': frm.doc.employee_number }, ['name'], function(r) {\n                // Prüfen, ob eine exakte Übereinstimmung der employee_number mit einem anderen Datensatz besteht\n                if (r && r.name && r.name !== frm.doc.name) {\n                    frm.set_df_property('employee_number', 'description', __('MA-Nummer mehrfach vergeben!'));\n                } else {\n                    frm.set_df_property('employee_number', 'description', '');\n                }\n            });\n        } else {\n            frm.set_df_property('employee_number', 'description', '');\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2025-05-23 14:21:02.294028",
  "module": "SUT App UEAG",
  "name": "Unbefristeter Vertrag",
  "script": "frappe.ui.form.on('Employee', {\ncustom_wochenstunden_grundvertrag: function(frm) {\n// Überprüfen, ob im Feld 'custom_wochenstunden_grundvertrag' etwas eingetragen ist\nif (frm.doc.custom_wochenstunden_grundvertrag) {\n// Kästchen 'custom_unbefristet_' markieren\nfrm.set_value('custom_unbefristet_', 1); // 1 für markiert, 0 für nicht markiert\nfrm.set_df_property('custom_unbefristet_', 'hidden', 0); // Kästchen anzeigen\n} else {\n// Kästchen 'custom_unbefristet_' nicht markieren\nfrm.set_value('custom_unbefristet_', 0);\nfrm.set_df_property('custom_unbefristet_', 'hidden', 1); // Kästchen verstecken\n}\n}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-05-22 12:23:20.758142",
  "module": "SUT App UEAG",
  "name": "Mitarbeiter - Daten aus verknüpften Projekten ziehen V3",
  "script": "frappe.ui.form.on('Employee', {\r\n    custom_projekt_1: function(frm) {\r\n        check_single_projekt(frm, 'custom_projekt_1', 'custom_befristung_des_1_vertrags');\r\n    },\r\n    custom_projekt_2: function(frm) {\r\n        check_single_projekt(frm, 'custom_projekt_2', 'custom_befristung_des_2_vertrags');\r\n    },\r\n    custom_projekt_3: function(frm) {\r\n        check_single_projekt(frm, 'custom_projekt_3', 'custom_befristung_des_3_vertrags');\r\n    },\r\n    custom_projekt_4: function(frm) {\r\n        check_single_projekt(frm, 'custom_projekt_4', 'custom_befristung_des_4_vertrags');\r\n    }\r\n});\r\n\r\n// Funktion zur Überprüfung eines einzelnen Projektfeldes\r\nfunction check_single_projekt(frm, projekt_feld, vertrags_feld) {\r\n    var projekt = frm.doc[projekt_feld];\r\n\r\n    if (!projekt) {\r\n        // Setze die zugehörigen Felder zurück, wenn das Projektfeld geleert wird\r\n        reset_fields(frm);\r\n        return;\r\n    }\r\n\r\n    frappe.db.get_value('Project', projekt, [\r\n        // 'custom_aufenthaltstitel_nötig',\r\n        'custom_führungszeugnis_nötig',\r\n        'custom_brandschutzhelfernachweis_benötigt',\r\n        'custom_einverständniserklärung_akteneinsicht_notwendig',\r\n        'custom_masernnachweis_nötig',\r\n        'custom_gesundheitspass_nötig',\r\n        'custom_ersthelfernachweis_benötigt',\r\n        'custom_in_welchem_aktualisierungsturnus',\r\n        'expected_end_date'\r\n    ]).then(r => {\r\n        if (r.message) {\r\n            let data = r.message;\r\n\r\n            frm.set_value(vertrags_feld, data.expected_end_date || '');\r\n\r\n            // frm.set_value('custom_aufenthaltstitel_nötig', data.custom_aufenthaltstitel_nötig ? 1 : 0);\r\n            frm.set_value('custom_führungszeugnis_nötig', data.custom_führungszeugnis_nötig ? 1 : 0);\r\n            frm.set_value('custom_brandschutzhelfernachweis_benötigt', data.custom_brandschutzhelfernachweis_benötigt ? 1 : 0);\r\n            frm.set_value('custom_einverständniserklärung_akteneinsicht_notwendig', data.custom_einverständniserklärung_akteneinsicht_notwendig ? 1 : 0);\r\n            frm.set_value('custom_masernnachweis_nötig', data.custom_masernnachweis_nötig ? 1 : 0);\r\n            frm.set_value('custom_gesundheitspass_nötig', data.custom_gesundheitspass_nötig ? 1 : 0);\r\n            frm.set_value('custom_ersthelfernachweis_benötigt', data.custom_ersthelfernachweis_benötigt ? 1 : 0);\r\n            frm.set_value('custom_in_welchem_aktualisierungsturnus', data.custom_in_welchem_aktualisierungsturnus || '');\r\n        }\r\n    });\r\n}\r\n\r\n// Funktion zum Zurücksetzen der Felder\r\nfunction reset_fields(frm) {\r\n    // frm.set_value('custom_aufenthaltstitel_nötig', 0);\r\n    frm.set_value('custom_führungszeugnis_nötig', 0);\r\n    frm.set_value('custom_brandschutzhelfernachweis_benötigt', 0);\r\n    frm.set_value('custom_einverständniserklärung_akteneinsicht_notwendig', 0);\r\n    frm.set_value('custom_masernnachweis_nötig', 0);\r\n    frm.set_value('custom_gesundheitspass_nötig', 0);\r\n    frm.set_value('custom_ersthelfernachweis_benötigt', 0);\r\n    frm.set_value('custom_in_welchem_aktualisierungsturnus', '');\r\n}\r\n",
  "view": "Form"
 }
]